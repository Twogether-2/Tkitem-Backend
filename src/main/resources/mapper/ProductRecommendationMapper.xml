<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tkitem.backend.domain.product_recommendation.mapper.ProductRecommendationMapper">

    <!-- Result Maps -->
    <resultMap id="checklistItemMap" type="tkitem.backend.domain.product_recommendation.vo.ChecklistItem">
        <id property="checklistItemId" column="CHECKLIST_ITEM_ID"/>
        <result property="tripId" column="TRIP_ID"/>
        <result property="productCategorySubId" column="PRODUCT_CATEGORY_SUB_ID"/>
        <result property="itemName" column="ITEM_NAME"/>
        <result property="scheduleDate" column="SCHEDULE_DATE"/>
        <result property="score" column="SCORE"/>
        <result property="tier" column="TIER"/>
        <result property="notes" column="NOTES"/>
    </resultMap>

    <resultMap id="productMap" type="tkitem.backend.domain.product_recommendation.vo.Product">
        <id property="productId" column="PRODUCT_ID"/>
        <result property="name" column="NAME"/>
        <result property="brandName" column="BRAND_NAME"/>
        <result property="categoryName" column="CATEGORY_NAME"/>
        <result property="url" column="URL"/>
        <result property="code" column="CODE"/>
        <result property="imgUrl" column="IMG_URL"/>
        <result property="price" column="PRICE"/>
        <result property="avgReview" column="AVG_REVIEW"/>
    </resultMap>

    <resultMap id="preferenceMap" type="tkitem.backend.domain.product_recommendation.vo.Preference">
        <id property="preferenceId" column="PREFERENCE_ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="brightness" column="BRIGHTNESS"/>
        <result property="boldness" column="BOLDNESS"/>
        <result property="fit" column="FIT"/>
        <result property="color" column="COLOR"/>
        <result property="firstLook" column="FIRST_LOOK"/>
        <result property="secondLook" column="SECOND_LOOK"/>
    </resultMap>

    <!-- 체크리스트 아이템 조회 -->
    <select id="findChecklistItemsByIds" resultMap="checklistItemMap">
        SELECT * FROM CHECKLIST_ITEM
        WHERE CHECKLIST_ITEM_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND IS_DELETED = 'F'
    </select>

    <select id="findChecklistItemById" resultMap="checklistItemMap">
        SELECT * FROM CHECKLIST_ITEM
        WHERE CHECKLIST_ITEM_ID = #{id}
          AND IS_DELETED = 'F'
    </select>

    <!-- 여행 정보 조회 -->
    <select id="findTripById" resultType="tkitem.backend.domain.product_recommendation.vo.Trip">
        SELECT * FROM TRIP WHERE TRIP_ID = #{id}
    </select>

    <select id="findUpcomingTrip" resultType="tkitem.backend.domain.product_recommendation.vo.Trip">
        SELECT * FROM TRIP
        WHERE MEMBER_ID = #{memberId}
          AND DEPARTURE_DATE > SYSDATE
        ORDER BY DEPARTURE_DATE ASC
            FETCH FIRST 1 ROW ONLY
    </select>

    <!-- 사용자 취향 조회 -->
    <select id="findPreferenceByMemberId" resultMap="preferenceMap">
        SELECT * FROM PREFERENCE WHERE MEMBER_ID = #{memberId}
        ORDER BY CREATED_AT DESC
        FETCH FIRST 1 ROW ONLY
    </select>

    <!-- ======================== 추천 쿼리 ======================== -->

    <!-- 1. 예산 내 최적 상품 조회 -->
    <select id="findBestProductForBudget" resultMap="productMap">
        WITH product_scores AS (
            SELECT
                p.PRODUCT_ID,
                p.NAME,
                p.BRAND_NAME,
                pcs.NAME AS CATEGORY_NAME,
                p.IMG_URL,
                p.PRICE,
                p.AVG_REVIEW,
                p.CODE,
                p.URL,
                -- 다층 스코어링: 태그 매칭 + 기본 점수
                -- 1. 태그 매칭 점수 (0~0.4)
                LEAST(0.4,
                      (SELECT COUNT(*) FROM PRODUCT_TAG pt
                                                JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                       WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                         AND (
                               (#{notes} LIKE '%RAIN%' AND ct.TAG_CODE = 'WEATHER_RAIN')
                               OR (#{notes} LIKE '%HUMID%' AND ct.TAG_CODE = 'WEATHER_HUMID')
                               OR (#{notes} LIKE '%WIND%' AND ct.TAG_CODE = 'WEATHER_WIND')
                               OR (#{notes} LIKE '%SUN%' AND ct.TAG_CODE = 'WEATHER_SUN')
                               OR (#{notes} LIKE '%COLD%' AND ct.TAG_CODE = 'WEATHER_COLD')
                               OR (#{notes} LIKE '%HOT%' AND ct.TAG_CODE = 'WEATHER_HOT')
                               OR (#{notes} LIKE '%SHOPPING%' AND ct.TAG_CODE = 'ACT_SHOPPING')
                               OR (#{notes} LIKE '%TOURING%' AND ct.TAG_CODE = 'ACT_TOURING')
                               OR (#{notes} LIKE '%SPORT%' AND ct.TAG_CODE = 'ACT_SPORT')
                               OR (#{notes} LIKE '%BEACH%' AND ct.TAG_CODE = 'ACT_BEACH')
                               OR (#{notes} LIKE '%HIKING%' AND ct.TAG_CODE = 'ACT_HIKING')
                           )) * 0.1
                    )
                    -- 2. 리뷰 점수 (0~0.3)
                    + CASE
                          WHEN p.AVG_REVIEW IS NULL THEN 0.15
                          ELSE (p.AVG_REVIEW / 5.0) * 0.3
                    END
                    -- 3. 가격 경쟁력 (0~0.2)
                    + CASE
                          WHEN p.PRICE &lt;= 30000 THEN 0.2
                          WHEN p.PRICE &lt;= 50000 THEN 0.15
                          WHEN p.PRICE &lt;= 100000 THEN 0.1
                          ELSE 0.05
                    END
                    -- 4. 기본 점수 (태그가 없어도 최소 점수 보장)
                    + 0.1 AS MATCH_SCORE
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
            WHERE p.CATEGORY_ID = #{categoryId}
              AND p.PRICE &lt;= #{maxPrice}
              AND (p.GENDER = #{gender} OR p.GENDER = 'U')
        )
        SELECT * FROM product_scores
        ORDER BY MATCH_SCORE DESC, AVG_REVIEW DESC NULLS LAST, PRICE ASC
            FETCH FIRST 1 ROW ONLY
    </select>

    <!-- 2. 상품 후보군 조회 -->
    <select id="findProductCandidates" resultType="tkitem.backend.domain.product_recommendation.vo.ProductWithScore">
        WITH product_matches AS (
            SELECT
                p.PRODUCT_ID,
                p.NAME,
                p.BRAND_NAME,
                pcs.NAME AS CATEGORY_NAME,
                p.CODE,
                p.URL,
                p.IMG_URL,
                p.PRICE,
                p.AVG_REVIEW,
                -- 다층 매칭 점수
                -- 1. 태그 매칭 (0~0.5)
                LEAST(0.5,
                      (SELECT COUNT(*) FROM PRODUCT_TAG pt
                                                JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                       WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                         AND (
                           (#{notes} LIKE '%' || SUBSTR(ct.TAG_CODE, INSTR(ct.TAG_CODE, '_') + 1) || '%')
                           )) * 0.15
                    )
                    -- 2. 카테고리 자체 매칭 보너스 (0.2)
                    + 0.2
                    -- 3. 리뷰 점수 (0~0.2)
                    + CASE
                          WHEN p.AVG_REVIEW IS NULL THEN 0.1
                          ELSE (p.AVG_REVIEW / 5.0) * 0.2
                    END
                    -- 4. 의류인 경우 사용자 취향 가중치
                    + CASE
                          WHEN #{scheduleDate} IS NOT NULL AND #{memberId} IS NOT NULL THEN
                              NVL((SELECT COUNT(*) * 0.05 FROM PRODUCT_TAG pt
                                                                   JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                                                   JOIN PREFERENCE pref ON pref.MEMBER_ID = #{memberId}
                                   WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                     AND (ct.TAG_CODE = 'STYLE_' || pref.FIRST_LOOK
                                       OR ct.TAG_CODE = 'STYLE_' || pref.SECOND_LOOK)), 0)
                          ELSE 0
                    END AS MATCH_SCORE,
                -- 매칭된 태그들
                NVL((SELECT LISTAGG(ct.LABEL, ',') WITHIN GROUP (ORDER BY ct.LABEL)
                     FROM PRODUCT_TAG pt
                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                     WHERE pt.PRODUCT_ID = p.PRODUCT_ID), '기본 추천') AS MATCHED_TAGS,
                -- 추천 이유
                CASE
                    WHEN #{scheduleDate} IS NOT NULL THEN '일정 ' || #{scheduleDate} || '일차 추천'
                    ELSE '여행 필수 아이템'
                    END ||
                CASE
                    WHEN p.AVG_REVIEW >= 4.5 THEN ' (베스트셀러)'
                    WHEN p.AVG_REVIEW >= 4.0 THEN ' (인기상품)'
                    ELSE ''
                    END AS RECOMMEND_REASON
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
            WHERE p.CATEGORY_ID = #{categoryId}
                AND (p.GENDER = #{gender} OR p.GENDER = 'U')
        )
        SELECT * FROM product_matches
        WHERE MATCH_SCORE > 0
        ORDER BY MATCH_SCORE DESC, AVG_REVIEW DESC NULLS LAST
            FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 3. 연관 상품 조회 -->
    <select id="findRelatedProducts" resultType="tkitem.backend.domain.product_recommendation.vo.ProductWithSimilarity">
        WITH base_product AS (
            SELECT p.*, pcs.NAME AS CATEGORY_NAME
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
            WHERE p.PRODUCT_ID = #{productId}
        ),
             base_tags AS (
                 SELECT pt.COMMON_TAG_ID
                 FROM PRODUCT_TAG pt
                 WHERE pt.PRODUCT_ID = #{productId}
             ),
             similar_products AS (
                 SELECT
                     p.PRODUCT_ID,
                     p.NAME,
                     p.BRAND_NAME,
                     pcs.NAME AS CATEGORY_NAME,
                     p.CODE,
                     p.URL,
                     p.IMG_URL,
                     p.PRICE,
                     p.AVG_REVIEW,
                     bp.NAME AS BASE_NAME,
                     -- 태그 유사도 계산 (Jaccard similarity)
                     CASE
                         WHEN (SELECT COUNT(*) FROM base_tags) = 0 THEN 0.3
                         ELSE NVL(COUNT(DISTINCT pt.COMMON_TAG_ID) * 1.0 /
                                  NULLIF((SELECT COUNT(*) + COUNT(DISTINCT pt2.COMMON_TAG_ID)
                                          FROM base_tags bt
                                                   LEFT JOIN PRODUCT_TAG pt2 ON pt2.PRODUCT_ID = p.PRODUCT_ID), 0), 0.3)
                         END AS SIMILARITY
                 FROM PRODUCT p
                          JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                          CROSS JOIN base_product bp
                          LEFT JOIN PRODUCT_TAG pt ON pt.PRODUCT_ID = p.PRODUCT_ID
                     AND pt.COMMON_TAG_ID IN (SELECT COMMON_TAG_ID FROM base_tags)
                 WHERE p.CATEGORY_ID = bp.CATEGORY_ID
                   AND p.PRODUCT_ID != #{productId}
                   AND (p.GENDER = #{gender} OR p.GENDER = 'U')
                 GROUP BY p.PRODUCT_ID, p.NAME, p.BRAND_NAME, pcs.NAME, p.CODE, p.URL,
                          p.IMG_URL, p.PRICE, p.AVG_REVIEW, bp.NAME
             )
        SELECT * FROM similar_products
        ORDER BY SIMILARITY DESC, AVG_REVIEW DESC NULLS LAST
            FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 4. 다가오는 여행 상품 추천 -->
    <select id="findUpcomingTripProducts" resultType="tkitem.backend.domain.product_recommendation.vo.ProductForTrip">
        WITH important_items AS (
            SELECT
                ci.CHECKLIST_ITEM_ID,
                ci.PRODUCT_CATEGORY_SUB_ID,
                ci.ITEM_NAME,
                ci.SCORE AS ITEM_SCORE,
                ci.TIER,
                ci.NOTES,
                ROW_NUMBER() OVER (ORDER BY ci.SCORE DESC) AS RN
            FROM CHECKLIST_ITEM ci
            WHERE ci.TRIP_ID = #{tripId}
              AND ci.IS_DELETED = 'F'
              AND ci.SCORE >= #{minScore}
        ),
             recommended_products AS (
                 SELECT
                     p.PRODUCT_ID,
                     p.NAME,
                     p.BRAND_NAME,
                     pcs.NAME AS CATEGORY_NAME,
                     p.URL,
                     p.IMG_URL,
                     p.PRICE,
                     p.AVG_REVIEW,
                     ii.ITEM_SCORE,
                     ii.TIER,
                     ROW_NUMBER() OVER (PARTITION BY ii.CHECKLIST_ITEM_ID ORDER BY p.AVG_REVIEW DESC NULLS LAST) AS PROD_RN
                 FROM important_items ii
                          JOIN PRODUCT p ON p.CATEGORY_ID = ii.PRODUCT_CATEGORY_SUB_ID
                          JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                 WHERE ii.RN &lt;= 10
                   AND (p.GENDER = #{gender} OR p.GENDER = 'U')
             )
        SELECT * FROM recommended_products
        WHERE PROD_RN &lt;= 2
          AND ROWNUM &lt;= #{limit}
        ORDER BY ITEM_SCORE DESC, AVG_REVIEW DESC NULLS LAST
    </select>

    <!-- 5. 패션 취향 기반 상품 추천 -->
    <select id="findFashionByPreference" resultType="tkitem.backend.domain.product_recommendation.vo.FashionProduct">
        WITH fashion_scores AS (
            SELECT
                p.PRODUCT_ID,
                p.NAME,
                p.BRAND_NAME,
                pcs.NAME AS CATEGORY_NAME,
                p.CODE,
                p.URL,
                p.IMG_URL,
                p.PRICE,
                p.AVG_REVIEW,
                -- 취향 매칭 점수 (여러 요소 결합)
                -- 1. 스타일 매칭 (0~0.4)
                LEAST(0.4,
                      NVL((SELECT COUNT(*) FROM PRODUCT_TAG pt
                                                    JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                           WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                             AND (
                                   (ct.TAG_CODE = 'STYLE_' || #{firstLook})
                                   OR (#{secondLook} IS NOT NULL AND ct.TAG_CODE = 'STYLE_' || #{secondLook})
                               )), 0) * 0.2
                    )
                    -- 2. 색상 취향 매칭 (0~0.2)
                    + LEAST(0.2,
                            NVL((SELECT COUNT(*) FROM PRODUCT_TAG pt
                                                          JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                 WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                   AND (
                                         (#{brightness} >= 50 AND ct.TAG_CODE IN ('COLOR_BRIGHT', 'COLOR_PASTEL'))
                                         OR (#{brightness} &lt; 50 AND ct.TAG_CODE IN ('COLOR_DARK', 'COLOR_NEUTRAL'))
                                         OR (#{boldness} >= 50 AND ct.TAG_CODE = 'COLOR_VIVID')
                                         OR (#{boldness} &lt; 50 AND ct.TAG_CODE = 'COLOR_NEUTRAL')
                                     )), 0) * 0.1
                    )
                    -- 3. 핏 매칭 (0~0.2)
                    + LEAST(0.2,
                            NVL((SELECT COUNT(*) FROM PRODUCT_TAG pt
                                                          JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                 WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                   AND (
                                         (#{fit} &lt;= 33 AND ct.TAG_CODE = 'FIT_SLIM')
                                         OR (#{fit} > 33 AND #{fit} &lt;= 66 AND ct.TAG_CODE = 'FIT_REGULAR')
                                         OR (#{fit} > 66 AND ct.TAG_CODE IN ('FIT_LOOSE', 'FIT_OVERSIZED'))
                                     )), 0) * 0.2
                    )
                    -- 4. 기본 점수 (태그가 없어도 의류면 추천 가능)
                    + 0.15
                    -- 5. 리뷰 점수
                    + CASE
                          WHEN p.AVG_REVIEW IS NULL THEN 0.05
                          ELSE (p.AVG_REVIEW / 5.0) * 0.1
                    END AS PREFERENCE_SCORE,
                -- 매칭된 스타일들
                NVL((SELECT LISTAGG(ct.LABEL, ',') WITHIN GROUP (ORDER BY ct.LABEL)
                     FROM PRODUCT_TAG pt
                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                     WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                       AND ct.TAG_GROUP IN ('FASHION_STYLE', 'FIT', 'COLOR')),
                    '베이직 스타일') AS MATCHED_STYLES
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                     JOIN PRODUCT_CATEGORY_MAIN pcm ON pcm.PRODUCT_CATEGORY_MAIN_ID = pcs.PRODUCT_CATEGORY_MAIN_ID
            WHERE pcm.NAME = '의류'
              AND (p.GENDER = #{gender} OR p.GENDER = 'U')
        )
        SELECT * FROM fashion_scores
        WHERE PREFERENCE_SCORE > 0.2
        ORDER BY PREFERENCE_SCORE DESC, AVG_REVIEW DESC NULLS LAST
            FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 카테고리별 최저가만 조회 -->
    <select id="getCategoryMinPrice" resultType="java.math.BigDecimal">
        SELECT MIN(p.PRICE)
        FROM PRODUCT p
        WHERE p.CATEGORY_ID = #{categoryId}
        AND p.PRICE > 0
            AND (p.GENDER = #{userGender} OR p.GENDER = 'U')
    </select>
</mapper>
