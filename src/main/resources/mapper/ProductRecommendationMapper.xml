<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tkitem.backend.domain.product_recommendation.mapper.ProductRecommendationMapper">

    <!-- Result Maps -->
    <resultMap id="checklistItemMap" type="tkitem.backend.domain.product_recommendation.vo.ChecklistItem">
        <id property="checklistItemId" column="CHECKLIST_ITEM_ID"/>
        <result property="tripId" column="TRIP_ID"/>
        <result property="productCategorySubId" column="PRODUCT_CATEGORY_SUB_ID"/>
        <result property="itemName" column="ITEM_NAME"/>
        <result property="scheduleDate" column="SCHEDULE_DATE"/>
        <result property="score" column="SCORE"/>
        <result property="tier" column="TIER"/>
        <result property="notes" column="NOTES"/>
    </resultMap>

    <resultMap id="productMap" type="tkitem.backend.domain.product_recommendation.vo.Product">
        <id property="productId" column="PRODUCT_ID"/>
        <result property="name" column="NAME"/>
        <result property="brandName" column="BRAND_NAME"/>
        <result property="categoryName" column="CATEGORY_NAME"/>
        <result property="url" column="URL"/>
        <result property="code" column="CODE"/>
        <result property="imgUrl" column="IMG_URL"/>
        <result property="price" column="PRICE"/>
        <result property="avgReview" column="AVG_REVIEW"/>
        <result property="recommendTokens" column="RECOMMEND_TOKENS"/>
    </resultMap>

    <resultMap id="preferenceMap" type="tkitem.backend.domain.product_recommendation.vo.Preference">
        <id property="preferenceId" column="PREFERENCE_ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="brightness" column="BRIGHTNESS"/>
        <result property="boldness" column="BOLDNESS"/>
        <result property="fit" column="FIT"/>
        <result property="color" column="COLOR"/>
        <result property="firstLook" column="FIRST_LOOK"/>
        <result property="secondLook" column="SECOND_LOOK"/>
    </resultMap>

    <!-- 체크리스트 아이템 조회 -->
    <select id="findChecklistItemsByIds" resultMap="checklistItemMap">
        SELECT * FROM CHECKLIST_ITEM
        WHERE CHECKLIST_ITEM_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND IS_DELETED = 'F'
    </select>

    <select id="findChecklistItemById" resultMap="checklistItemMap">
        SELECT * FROM CHECKLIST_ITEM
        WHERE CHECKLIST_ITEM_ID = #{id}
          AND IS_DELETED = 'F'
    </select>

    <!-- 여행 정보 조회 -->
    <select id="findTripById" resultType="tkitem.backend.domain.product_recommendation.vo.Trip">
        SELECT * FROM TRIP WHERE TRIP_ID = #{id}
    </select>

    <select id="findUpcomingTrip" resultType="tkitem.backend.domain.product_recommendation.vo.Trip">
        SELECT * FROM TRIP
        WHERE MEMBER_ID = #{memberId}
          AND DEPARTURE_DATE > SYSDATE
        ORDER BY DEPARTURE_DATE ASC
            FETCH FIRST 1 ROW ONLY
    </select>

    <!-- 사용자 취향 조회 -->
    <select id="findPreferenceByMemberId" resultMap="preferenceMap">
        SELECT * FROM PREFERENCE WHERE MEMBER_ID = #{memberId}
        ORDER BY CREATED_AT DESC
        FETCH FIRST 1 ROW ONLY
    </select>

    <!-- ======================== 추천 쿼리 ======================== -->

    <!-- 1. 예산 내 최적 상품 조회 -->
    <select id="findBestProductForBudget" resultMap="productMap">
        /* 이 여행이 방문하는 도시 집합 */
        WITH trip_city AS (
            SELECT DISTINCT tc.city_id
            FROM TRIP tr
                     JOIN TOUR_PACKAGE tp ON tp.TOUR_PACKAGE_ID = tr.TOUR_PACKAGE_ID
                     JOIN TOUR_CITY tc    ON tc.TOUR_ID         = tp.TOUR_ID
            WHERE tr.TRIP_ID = #{tripId,jdbcType=NUMERIC}
        ),
            /* 임계값 통일(상향=선호 강함) */
             th AS ( SELECT 60 TH_BRIGHT, 60 TH_COLOR, 60 TH_FIT, 60 TH_BOLD FROM dual ),
             user_preference AS (
                 SELECT *
                 FROM PREFERENCE
                 WHERE MEMBER_ID = #{memberId, jdbcType=NUMERIC}
                     FETCH FIRST 1 ROWS ONLY
             ),
             base AS (
                 SELECT
                     p.PRODUCT_ID,
                     p.NAME,
                     p.BRAND_NAME,
                     pcs.NAME AS CATEGORY_NAME,
                     p.IMG_URL,
                     p.PRICE,
                     p.AVG_REVIEW,
                     p.CODE,
                     p.URL,
                     p.CATEGORY_ID,                  -- 추천 이유에서 카테고리 POP 대체 사용 가능
                     pcs.PRODUCT_CATEGORY_MAIN_ID,
                     /* ===== base_score ===== */
                     (
                         /* 1) 태그 매칭(날씨/활동) 0~0.30 */
                             LEAST(
                                     0.30,
                                     (
                                         SELECT COUNT(*)
                                         FROM PRODUCT_TAG pt
                                                  JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                         WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                           AND (
                                                 (#{notes, jdbcType=VARCHAR} LIKE '%RAIN%'    AND ct.TAG_CODE = 'WEATHER_RAIN')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%HUMID%'   AND ct.TAG_CODE = 'WEATHER_HUMID')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%WIND%'    AND ct.TAG_CODE = 'WEATHER_WIND')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%SUN%'     AND ct.TAG_CODE = 'WEATHER_SUN')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%COLD%'    AND ct.TAG_CODE = 'WEATHER_COLD')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%HOT%'     AND ct.TAG_CODE = 'WEATHER_HOT')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%SHOPPING%' AND ct.TAG_CODE = 'ACT_SHOPPING')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%TOURING%'  AND ct.TAG_CODE = 'ACT_TOURING')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%SPORT%'    AND ct.TAG_CODE = 'ACT_SPORT')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%BEACH%'    AND ct.TAG_CODE = 'ACT_BEACH')
                                                 OR (#{notes, jdbcType=VARCHAR} LIKE '%HIKING%'   AND ct.TAG_CODE = 'ACT_HIKING')
                                             )
                                     ) * 0.10
                                 )
                             /* 2) 리뷰 0~0.15 (체감+캡) */
                             + CASE
                                   WHEN p.AVG_REVIEW IS NULL THEN 0.075
                                   ELSE POWER(LEAST(p.AVG_REVIEW, 4.7) / 5.0, 2) * 0.15
                                 END
                             /* 3) 가격 0~0.10 */
                             + CASE
                                   WHEN p.PRICE &lt;= 30000  THEN 0.10
                                   WHEN p.PRICE &lt;= 50000  THEN 0.08
                                   WHEN p.PRICE &lt;= 100000 THEN 0.05
                                   ELSE 0.02
                                 END
                             /* 4) 기본 0.05 */
                             + 0.05
                             /* 5) 도시 인기 가점: 상품 POP ×0.10 */
                             + NVL((
                                       SELECT MAX(NVL(cip.POP_PCTL,0)) * 0.10
                                       FROM CITY_ITEM_POP cip
                                       WHERE cip.PRODUCT_ID = p.PRODUCT_ID
                                         AND EXISTS (SELECT 1 FROM trip_city tc WHERE tc.city_id = cip.CITY_ID)
                                   ), 0)
                         ) AS base_score
                 FROM PRODUCT p
                          JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                 WHERE p.CATEGORY_ID = #{categoryId, jdbcType=NUMERIC}
                   AND p.PRICE       &lt;= #{maxPrice, jdbcType=NUMERIC}
                   AND (p.GENDER = #{gender, jdbcType=VARCHAR} OR p.GENDER = 'U')
             ),
             product_scores AS (
                 SELECT
                     b.*,
                     /* ===== preference_score ===== */
                     (
                         /* 명도 → COLOR_TONE_(LIGHT|DARK) 0.10 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.10
                                     FROM PRODUCT_TAG pt
                                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                              JOIN user_preference up ON 1=1
                                              JOIN th ON 1=1
                                     WHERE pt.PRODUCT_ID = b.PRODUCT_ID
                                       AND ct.TAG_GROUP = 'COLOR_TONE'
                                       AND ct.TAG_CODE  = CASE WHEN NVL(up.BRIGHTNESS,50) &gt;= th.TH_BRIGHT
                                                                   THEN 'COLOR_TONE_LIGHT' ELSE 'COLOR_TONE_DARK' END
                                 ), 0)
                             +
                             /* 채도 → COLOR_SAT_(VIVID|MUTED) 0.10 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.10
                                     FROM PRODUCT_TAG pt
                                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                              JOIN user_preference up ON 1=1
                                              JOIN th ON 1=1
                                     WHERE pt.PRODUCT_ID = b.PRODUCT_ID
                                       AND ct.TAG_GROUP = 'COLOR_SAT'
                                       AND ct.TAG_CODE  = CASE WHEN NVL(up.COLOR,50) &gt;= th.TH_COLOR
                                                                   THEN 'COLOR_SAT_VIVID' ELSE 'COLOR_SAT_MUTED' END
                                 ), 0)
                             +
                             /* 화려함 → BOLDNESS_(BOLD|MILD) 0.10 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.10
                                     FROM PRODUCT_TAG pt
                                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                              JOIN user_preference up ON 1=1
                                              JOIN th ON 1=1
                                     WHERE pt.PRODUCT_ID = b.PRODUCT_ID
                                       AND ct.TAG_GROUP = 'BOLDNESS'
                                       AND ct.TAG_CODE  = CASE WHEN NVL(up.BOLDNESS,50) &gt;= th.TH_BOLD
                                                                   THEN 'BOLD_MILD' ELSE 'BOLD_BOLD' END
                                 ), 0)
                             +
                             /* LOOK 선호(의류) 0.15 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.15
                                     FROM PRODUCT_TAG pt
                                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                              JOIN user_preference up ON 1=1
                                     WHERE pt.PRODUCT_ID = b.PRODUCT_ID
                                       AND b.PRODUCT_CATEGORY_MAIN_ID = 8
                                       AND ct.TAG_GROUP='FASHION_STYLE'
                                       AND ( (up.FIRST_LOOK  IS NOT NULL AND ct.TAG_CODE = ('STYLE_' || up.FIRST_LOOK))
                                         OR (up.SECOND_LOOK IS NOT NULL AND ct.TAG_CODE = ('STYLE_' || up.SECOND_LOOK)) )
                                 ), 0)
                             +
                             /* 핏 선호(의류) 0.10 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.10
                                     FROM PRODUCT_TAG pt
                                              JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                              JOIN user_preference up ON 1=1
                                              JOIN th ON 1=1
                                     WHERE pt.PRODUCT_ID = b.PRODUCT_ID
                                       AND b.PRODUCT_CATEGORY_MAIN_ID = 8
                                       AND ct.TAG_GROUP='FIT'
                                       AND ct.TAG_CODE = CASE WHEN NVL(up.FIT,50) &gt;= th.TH_FIT
                                                                  THEN 'FIT_SLIM' ELSE 'FIT_RELAXED' END
                                 ), 0)
                             +
                             /* 브랜드 충성도 0.05 */
                             NVL((
                                     SELECT LEAST(1, COUNT(*)) * 0.05
                                     FROM ORDER_ITEM oi
                                              JOIN ORDERS o ON o.ORDER_ID = oi.ORDER_ID
                                     WHERE o.MEMBER_ID = #{memberId, jdbcType=NUMERIC}
                                       AND oi.PRODUCT_ID IN (
                                         SELECT p2.PRODUCT_ID FROM PRODUCT p2 WHERE p2.BRAND_NAME = b.BRAND_NAME
                                     )
                                 ), 0)
                         ) AS preference_score
                 FROM base b
             )
        SELECT
            PRODUCT_ID, NAME, BRAND_NAME, CATEGORY_NAME, IMG_URL, PRICE, AVG_REVIEW, CODE, URL,
            base_score,
            preference_score,
            (base_score * 0.50) + (preference_score * 0.50) AS final_score,

            /* ===================== 추천 이유 토큰 ===================== */
            NVL((
                    SELECT LISTAGG(tok, ' | ') WITHIN GROUP (ORDER BY ord)
                    FROM (
                             /* 도시 인기(상품) — 0이면 제외 */
                             SELECT (
                                        SELECT CASE WHEN MAX(NVL(cip.POP_PCTL,0)) &gt; 0
                                                        THEN 'CITY_POP:' || TO_CHAR(ROUND(100*MAX(NVL(cip.POP_PCTL,0)),0)) || 'pctl'
                                                   END
                                        FROM CITY_ITEM_POP cip
                                        WHERE cip.PRODUCT_ID = PRODUCT_ID
                                          AND EXISTS (SELECT 1 FROM trip_city tc WHERE tc.city_id = cip.CITY_ID)
                                    ) AS tok, 10 AS ord FROM dual



                                 /* 컨텍스트 태그 매칭 — 매칭 없으면 NULL */
                             UNION ALL
                             SELECT (
                                        SELECT NULLIF('MATCH:' || (
                                            SELECT LISTAGG(code, ',') WITHIN GROUP (ORDER BY code)
                                            FROM (
                                                     SELECT 'RAIN'    AS code FROM dual WHERE #{notes} LIKE '%RAIN%'    AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_RAIN')
                                                     UNION ALL SELECT 'HUMID'   FROM dual WHERE #{notes} LIKE '%HUMID%'   AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_HUMID')
                                                     UNION ALL SELECT 'WIND'    FROM dual WHERE #{notes} LIKE '%WIND%'    AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_WIND')
                                                     UNION ALL SELECT 'SUN'     FROM dual WHERE #{notes} LIKE '%SUN%'     AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_SUN')
                                                     UNION ALL SELECT 'COLD'    FROM dual WHERE #{notes} LIKE '%COLD%'    AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_COLD')
                                                     UNION ALL SELECT 'HOT'     FROM dual WHERE #{notes} LIKE '%HOT%'     AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='WEATHER_HOT')
                                                     UNION ALL SELECT 'SHOPPING' FROM dual WHERE #{notes} LIKE '%SHOPPING%' AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='ACT_SHOPPING')
                                                     UNION ALL SELECT 'TOURING'  FROM dual WHERE #{notes} LIKE '%TOURING%'  AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='ACT_TOURING')
                                                     UNION ALL SELECT 'SPORT'    FROM dual WHERE #{notes} LIKE '%SPORT%'    AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='ACT_SPORT')
                                                     UNION ALL SELECT 'BEACH'    FROM dual WHERE #{notes} LIKE '%BEACH%'    AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='ACT_BEACH')
                                                     UNION ALL SELECT 'HIKING'   FROM dual WHERE #{notes} LIKE '%HIKING%'   AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID WHERE pt.PRODUCT_ID=PRODUCT_ID AND ct.TAG_CODE='ACT_HIKING')
                                                 )
                                        ), 'MATCH:')
                                        FROM dual
                                    ) AS tok, 20 AS ord FROM dual

                                 /* 취향 일치 토큰들 (임계값 방향 통일: ≥60) */
                             UNION ALL
                             SELECT (
                                        SELECT CASE WHEN EXISTS (
                                            SELECT 1
                                            FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID
                                                                JOIN user_preference up ON 1=1
                                                                JOIN th ON 1=1
                                            WHERE pt.PRODUCT_ID = PRODUCT_ID
                                              AND ct.TAG_GROUP='COLOR_TONE'
                                              AND ct.TAG_CODE = CASE WHEN NVL(up.BRIGHTNESS,50) &gt;= th.TH_BRIGHT
                                                                         THEN 'COLOR_TONE_LIGHT' ELSE 'COLOR_TONE_DARK' END
                                        )
                                                        THEN 'TONE:' ||
                                                             CASE WHEN (SELECT NVL(BRIGHTNESS,50) FROM user_preference FETCH FIRST 1 ROWS ONLY) &gt;= (SELECT TH_BRIGHT FROM th)
                                                                      THEN 'LIGHT' ELSE 'DARK' END
                                                   END
                                        FROM dual
                                    ) AS tok, 30 AS ord FROM dual

                             UNION ALL
                             SELECT (
                                        SELECT CASE WHEN EXISTS (
                                            SELECT 1
                                            FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID
                                                                JOIN user_preference up ON 1=1
                                                                JOIN th ON 1=1
                                            WHERE pt.PRODUCT_ID = PRODUCT_ID
                                              AND ct.TAG_GROUP='COLOR_SAT'
                                              AND ct.TAG_CODE = CASE WHEN NVL(up.COLOR,50) &gt;= th.TH_COLOR
                                                                         THEN 'COLOR_SAT_VIVID' ELSE 'COLOR_SAT_MUTED' END
                                        )
                                                        THEN 'SAT:' ||
                                                             CASE WHEN (SELECT NVL(COLOR,50) FROM user_preference FETCH FIRST 1 ROWS ONLY) &gt;= (SELECT TH_COLOR FROM th)
                                                                      THEN 'VIVID' ELSE 'MUTED' END
                                                   END
                                        FROM dual
                                    ) AS tok, 31 AS ord FROM dual

                                 /* 화려함(BOLDNESS) */
                             UNION ALL
                             SELECT (
                                        SELECT CASE WHEN EXISTS (
                                            SELECT 1
                                            FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                                                JOIN user_preference up ON 1=1
                                                                JOIN th ON 1=1
                                            WHERE pt.PRODUCT_ID = PRODUCT_ID
                                              AND ct.TAG_GROUP='BOLDNESS'
                                              AND ct.TAG_CODE = CASE WHEN NVL(up.BOLDNESS,50) &gt;= th.TH_BOLD
                                                                         THEN 'BOLD_MILD' ELSE 'BOLD_BOLD' END
                                        )
                                                        THEN 'BOLD:' ||
                                                             CASE WHEN (SELECT NVL(BOLDNESS,50) FROM user_preference FETCH FIRST 1 ROWS ONLY) &gt;= (SELECT TH_BOLD FROM th)
                                                                      THEN 'MILD' ELSE 'BOLD' END
                                                   END
                                        FROM dual
                                    ) AS tok, 34 AS ord FROM dual

                                 /* LOOK 일치 */
                             UNION ALL
                             SELECT (
                                        SELECT CASE
                                                   WHEN EXISTS (
                                                       SELECT 1
                                                       FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID
                                                                           JOIN user_preference up ON 1=1
                                                       WHERE pt.PRODUCT_ID=PRODUCT_ID
                                                         AND ct.TAG_GROUP='FASHION_STYLE'
                                                         AND ( (up.FIRST_LOOK  IS NOT NULL AND ct.TAG_CODE='STYLE_'||up.FIRST_LOOK)
                                                           OR   (up.SECOND_LOOK IS NOT NULL AND ct.TAG_CODE='STYLE_'||up.SECOND_LOOK) )
                                                   )
                                                       THEN 'STYLE:' ||
                                                            NVL((
                                                                    SELECT LISTAGG(code, ',') WITHIN GROUP (ORDER BY code)
                                                                    FROM (
                                                                             SELECT up.FIRST_LOOK  AS code FROM user_preference up WHERE up.FIRST_LOOK  IS NOT NULL
                                                                                                                                     AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt2 JOIN COMMON_TAG ct2 ON ct2.COMMON_TAG_ID=pt2.COMMON_TAG_ID
                                                                                                                                                 WHERE pt2.PRODUCT_ID=PRODUCT_ID AND ct2.TAG_CODE='STYLE_'||up.FIRST_LOOK)
                                                                             UNION ALL
                                                                             SELECT up.SECOND_LOOK AS code FROM user_preference up WHERE up.SECOND_LOOK IS NOT NULL
                                                                                                                                     AND EXISTS (SELECT 1 FROM PRODUCT_TAG pt3 JOIN COMMON_TAG ct3 ON ct3.COMMON_TAG_ID=pt3.COMMON_TAG_ID
                                                                                                                                                 WHERE pt3.PRODUCT_ID=PRODUCT_ID AND ct3.TAG_CODE='STYLE_'||up.SECOND_LOOK)
                                                                         )
                                                                ), '')
                                                   END
                                        FROM dual
                                    ) AS tok, 32 AS ord FROM dual

                                 /* FIT 일치 */
                             UNION ALL
                             SELECT (
                                        SELECT CASE WHEN EXISTS (
                                            SELECT 1 FROM PRODUCT_TAG pt JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID=pt.COMMON_TAG_ID
                                                                         JOIN user_preference up ON 1=1
                                                                         JOIN th ON 1=1
                                            WHERE pt.PRODUCT_ID=PRODUCT_ID
                                              AND ct.TAG_GROUP='FIT'
                                              AND ct.TAG_CODE = CASE WHEN NVL(up.FIT,50) &gt;= th.TH_FIT
                                                                         THEN 'FIT_SLIM' ELSE 'FIT_RELAXED' END
                                        )
                                                        THEN 'FIT:' ||
                                                             CASE WHEN (SELECT NVL(FIT,50) FROM user_preference FETCH FIRST 1 ROWS ONLY) &gt;= (SELECT TH_FIT FROM th)
                                                                      THEN 'SLIM' ELSE 'RELAXED' END
                                                   END
                                        FROM dual
                                    ) AS tok, 33 AS ord FROM dual

                                 /* 브랜드 충성도 */
                             UNION ALL
                             SELECT (
                                        SELECT CASE WHEN EXISTS (
                                            SELECT 1
                                            FROM ORDER_ITEM oi JOIN ORDERS o ON o.ORDER_ID=oi.ORDER_ID
                                            WHERE o.MEMBER_ID = #{memberId, jdbcType=NUMERIC}
                                              AND oi.PRODUCT_ID IN (SELECT p2.PRODUCT_ID FROM PRODUCT p2 WHERE p2.BRAND_NAME = BRAND_NAME)
                                        ) THEN 'BRAND:LOYAL' END
                                        FROM dual
                                    ) AS tok, 40 AS ord FROM dual

                                 /* 리뷰 요약 */
                             UNION ALL
                             SELECT (CASE WHEN AVG_REVIEW IS NOT NULL THEN 'RATING:' || TO_CHAR(ROUND(AVG_REVIEW,1)) END) AS tok, 51 AS ord FROM dual
                         )
                    WHERE tok IS NOT NULL
                ), '추천 기준 없음') AS RECOMMEND_TOKENS
            /* ========================================================= */

        FROM product_scores
        ORDER BY final_score DESC, AVG_REVIEW DESC NULLS LAST, PRICE ASC
            FETCH FIRST 1 ROWS ONLY
    </select>



    <!-- 2. 상품 후보군 조회 -->
    <select id="findProductCandidates" resultType="tkitem.backend.domain.product_recommendation.vo.ProductWithScore">
        WITH up AS (
        SELECT *
        FROM PREFERENCE
        WHERE MEMBER_ID = #{memberId}
        FETCH FIRST 1 ROWS ONLY
        ),
        product_matches AS (
        SELECT
        p.PRODUCT_ID,
        p.NAME,
        p.BRAND_NAME,
        pcs.NAME AS CATEGORY_NAME,
        p.CODE,
        p.URL,
        p.IMG_URL,
        p.PRICE,
        p.AVG_REVIEW,
        -- 다층 매칭 점수
        -- 1. 태그 매칭 (0~0.5)
        (
        LEAST(0.5,
        (SELECT COUNT(*) FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND (
        (#{notes} LIKE '%' || SUBSTR(ct.TAG_CODE, INSTR(ct.TAG_CODE, '_') + 1) || '%')
        )) * 0.15
        )
        -- 2. 카테고리 자체 매칭 보너스 (0.2)
        + 0.2
        -- 3. 리뷰 점수 (0~0.2)
        + CASE
        WHEN p.AVG_REVIEW IS NULL THEN 0.035
        ELSE POWER(LEAST(p.AVG_REVIEW, 4.7) / 5.0, 2) * 0.07
        END
        -- 4. 의류인 경우 사용자 취향 가중치
        + NVL((
        /* 4-1) 명도 선호 → COLOR_TONE_(LIGHT|DARK) 0.08 */
        SELECT LEAST(1, COUNT(*)) * 0.08
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        JOIN up ON 1=1
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND ct.TAG_GROUP = 'COLOR_TONE'
        AND ct.TAG_CODE = CASE WHEN NVL(up.BRIGHTNESS,50) &lt;= 50
        THEN 'COLOR_TONE_LIGHT' ELSE 'COLOR_TONE_DARK' END
        ), 0)
        + NVL((
        /* 4-2) 채도 선호 → COLOR_SAT_(VIVID|MUTED) 0.08 */
        SELECT LEAST(1, COUNT(*)) * 0.08
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        JOIN up ON 1=1
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND ct.TAG_GROUP = 'COLOR_SAT'
        AND ct.TAG_CODE = CASE WHEN NVL(up.COLOR,50) &lt;= 50
        THEN 'COLOR_SAT_VIVID' ELSE 'COLOR_SAT_MUTED' END
        ), 0)
        + NVL((
        /* 4-3) 대담함 선호 → BOLDNESS_(BOLD|MILD) 0.08 */
        SELECT LEAST(1, COUNT(*)) * 0.08
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        JOIN up ON 1=1
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND ct.TAG_GROUP = 'BOLDNESS'
        AND ct.TAG_CODE = CASE WHEN NVL(up.BOLDNESS,50) &lt;= 60
        THEN 'BOLD_BOLD' ELSE 'BOLD_MILD' END
        ), 0)
        + NVL((
        /* 4-4) LOOK 선호(의류만) → LOOK_FIRST/SECOND_LOOK 0.10 */
        SELECT LEAST(1, COUNT(*)) * 0.10
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        JOIN up ON 1=1
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND pcs.PRODUCT_CATEGORY_MAIN_ID = 8
        AND ct.TAG_GROUP = 'FASHION_STYLE'
        AND (
        (up.FIRST_LOOK IS NOT NULL AND ct.TAG_CODE = ('STYLE_' || up.FIRST_LOOK))
        OR (up.SECOND_LOOK IS NOT NULL AND ct.TAG_CODE = ('STYLE_' || up.SECOND_LOOK))
        )
        ), 0)
        + NVL((
        /* 4-5) 핏 선호(의류만, 숫자) → FIT_(SLIM|RELAXED) 0.08 */
        SELECT LEAST(1, COUNT(*)) * 0.08
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        JOIN up ON 1=1
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
        AND pcs.PRODUCT_CATEGORY_MAIN_ID = 8
        AND ct.TAG_GROUP = 'FIT'
        AND ct.TAG_CODE = CASE WHEN NVL(up.FIT,50) >= 60
        THEN 'FIT_SLIM' ELSE 'FIT_RELAXED' END
        ), 0)
        ) AS MATCH_SCORE,
        -- 매칭된 태그들
        NVL((SELECT LISTAGG(ct.LABEL, ',') WITHIN GROUP (ORDER BY ct.LABEL)
        FROM PRODUCT_TAG pt
        JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
        WHERE pt.PRODUCT_ID = p.PRODUCT_ID), '기본 추천') AS MATCHED_TAGS,
        -- 추천 이유
        CASE
        WHEN #{scheduleDate, jdbcType=NUMERIC} IS NOT NULL
        THEN '일정 ' || TO_CHAR(#{scheduleDate, jdbcType=NUMERIC}) || '일차 추천'
        ELSE '여행 필수 아이템'
        END ||
        CASE
        WHEN p.AVG_REVIEW >= 4.5 THEN ' (베스트셀러)'
        WHEN p.AVG_REVIEW >= 4.0 THEN ' (인기상품)'
        ELSE ''
        END AS RECOMMEND_REASON
        FROM PRODUCT p
        JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
        WHERE p.CATEGORY_ID = #{categoryId}
        AND (p.GENDER = #{gender} OR p.GENDER = 'U')
        )
        SELECT * FROM product_matches
        WHERE MATCH_SCORE > 0
        ORDER BY MATCH_SCORE DESC, AVG_REVIEW DESC NULLS LAST
        FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 3. 연관 상품 조회 -->
    <select id="findRelatedProducts" resultType="tkitem.backend.domain.product_recommendation.vo.ProductWithSimilarity">
        WITH base_product AS (
            SELECT p.*, pcs.NAME AS CATEGORY_NAME
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
            WHERE p.PRODUCT_ID = #{productId}
        ),
             base_tags AS (
                 SELECT pt.COMMON_TAG_ID
                 FROM PRODUCT_TAG pt
                 WHERE pt.PRODUCT_ID = #{productId}
             ),
             similar_products AS (
                 SELECT
                     p.PRODUCT_ID,
                     p.NAME,
                     p.BRAND_NAME,
                     pcs.NAME AS CATEGORY_NAME,
                     p.CODE,
                     p.URL,
                     p.IMG_URL,
                     p.PRICE,
                     p.AVG_REVIEW,
                     bp.NAME AS BASE_NAME,
                     -- 태그 유사도 계산 (Jaccard similarity)
                     CASE
                         WHEN (SELECT COUNT(*) FROM base_tags) = 0 THEN 0.3
                         ELSE NVL(COUNT(DISTINCT pt.COMMON_TAG_ID) * 1.0 /
                                  NULLIF((SELECT COUNT(*) + COUNT(DISTINCT pt2.COMMON_TAG_ID)
                                          FROM base_tags bt
                                                   LEFT JOIN PRODUCT_TAG pt2 ON pt2.PRODUCT_ID = p.PRODUCT_ID), 0), 0.3)
                         END AS SIMILARITY
                 FROM PRODUCT p
                          JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                          CROSS JOIN base_product bp
                          LEFT JOIN PRODUCT_TAG pt ON pt.PRODUCT_ID = p.PRODUCT_ID
                     AND pt.COMMON_TAG_ID IN (SELECT COMMON_TAG_ID FROM base_tags)
                 WHERE p.CATEGORY_ID = bp.CATEGORY_ID
                   AND p.PRODUCT_ID != #{productId}
                   AND (p.GENDER = #{gender} OR p.GENDER = 'U')
                 GROUP BY p.PRODUCT_ID, p.NAME, p.BRAND_NAME, pcs.NAME, p.CODE, p.URL,
                          p.IMG_URL, p.PRICE, p.AVG_REVIEW, bp.NAME
             )
        SELECT * FROM similar_products
        ORDER BY SIMILARITY DESC, AVG_REVIEW DESC NULLS LAST
            FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 4. 다가오는 여행 상품 추천 -->
    <select id="findUpcomingTripProducts" resultType="tkitem.backend.domain.product_recommendation.vo.ProductForTrip">
        WITH important_items AS (
            SELECT
                ci.CHECKLIST_ITEM_ID,
                ci.PRODUCT_CATEGORY_SUB_ID,
                ci.ITEM_NAME,
                ci.SCORE AS ITEM_SCORE,
                ci.TIER,
                ci.NOTES,
                ROW_NUMBER() OVER (ORDER BY ci.SCORE DESC) AS RN
            FROM CHECKLIST_ITEM ci
            WHERE ci.TRIP_ID = #{tripId}
              AND ci.IS_DELETED = 'F'
              AND ci.SCORE >= #{minScore}
        ),
             recommended_products AS (
                 SELECT
                     p.PRODUCT_ID,
                     p.NAME,
                     p.BRAND_NAME,
                     pcs.NAME AS CATEGORY_NAME,
                     p.URL,
                     p.IMG_URL,
                     p.PRICE,
                     p.AVG_REVIEW,
                     ii.ITEM_SCORE,
                     ii.TIER,
                     ROW_NUMBER() OVER (PARTITION BY ii.CHECKLIST_ITEM_ID ORDER BY p.AVG_REVIEW DESC NULLS LAST) AS PROD_RN
                 FROM important_items ii
                          JOIN PRODUCT p ON p.CATEGORY_ID = ii.PRODUCT_CATEGORY_SUB_ID
                          JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                 WHERE ii.RN &lt;= 10
                   AND (p.GENDER = #{gender} OR p.GENDER = 'U')
             )
        SELECT * FROM recommended_products
        WHERE PROD_RN &lt;= 2
          AND ROWNUM &lt;= #{limit}
        ORDER BY ITEM_SCORE DESC, AVG_REVIEW DESC NULLS LAST
    </select>

    <!-- 5. 패션 취향 기반 상품 추천 -->
    <select id="findFashionByPreference" resultType="tkitem.backend.domain.product_recommendation.vo.FashionProduct">
        WITH fashion_scores AS (
            SELECT
                p.PRODUCT_ID,
                p.NAME,
                p.BRAND_NAME,
                pcs.NAME AS CATEGORY_NAME,
                p.CODE,
                p.URL,
                p.IMG_URL,
                p.PRICE,
                p.AVG_REVIEW,
                /* ===== 취향 매칭 점수 ===== */
                (
                    /* 1) LOOK 매칭 (0~0.4) : FIRST/SECOND_LOOK */
                        LEAST(
                                0.4,
                                NVL((
                                        SELECT COUNT(*)
                                        FROM PRODUCT_TAG pt
                                                 JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                          AND ct.TAG_GROUP = 'FASHION_STYLE'
                                          AND (
                                                (#{firstLook}  IS NOT NULL AND ct.TAG_CODE = 'STYLE_' || #{firstLook})
                                                OR (#{secondLook} IS NOT NULL AND ct.TAG_CODE = 'STYLE_' || #{secondLook})
                                            )
                                    ), 0) * 0.2
                            )
                        /* 2) 색/톤/대담함 매칭 (최대 0.20 = 톤 0.10 + 채도/대담함 0.10) */
                        + NVL((
                                  /* 2-1) 명도 → COLOR_TONE_(LIGHT|DARK) 0.10 */
                                  SELECT LEAST(1, COUNT(*)) * 0.10
                                  FROM PRODUCT_TAG pt
                                           JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                  WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                    AND ct.TAG_GROUP = 'COLOR_TONE'
                                    AND ct.TAG_CODE  = CASE WHEN NVL(#{brightness},50) >= 50
                                                                THEN 'COLOR_TONE_LIGHT' ELSE 'COLOR_TONE_DARK' END
                              ), 0)
                        + NVL((
                                  /* 2-2) 채도/대담함 → COLOR_SAT_(VIVID|MUTED) 또는 BOLDNESS_(BOLD|MILD) 0.10
                                     - color 파라미터가 없어서 boldness로 해석:
                                       boldness >= 50 → VIVID/BOLD, 그 외 → MUTED/MILD */
                                  SELECT LEAST(1, COUNT(*)) * 0.10
                                  FROM PRODUCT_TAG pt
                                           JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                  WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                    AND (
                                          (ct.TAG_GROUP='COLOR_SAT' AND ct.TAG_CODE = CASE WHEN NVL(#{boldness},50) >= 50
                                                                                               THEN 'COLOR_SAT_VIVID' ELSE 'COLOR_SAT_MUTED' END)
                                          OR (ct.TAG_GROUP='BOLDNESS'  AND ct.TAG_CODE = CASE WHEN NVL(#{boldness},50) >= 50
                                                                                                  THEN 'BOLD_BOLD' ELSE 'BOLD_MILD' END)
                                      )
                              ), 0)
                        /* 3) 핏 매칭 (0~0.2) : FIT_(SLIM|RELAXED) */
                        + LEAST(
                                0.2,
                                NVL((
                                        SELECT COUNT(*) * 0.20
                                        FROM PRODUCT_TAG pt
                                                 JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                                        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                                          AND ct.TAG_GROUP = 'FIT'
                                          AND ct.TAG_CODE  = CASE WHEN NVL(#{fit},50) >= 60
                                                                      THEN 'FIT_SLIM' ELSE 'FIT_RELAXED' END
                                    ), 0)
                            )
                        /* 4) 기본 점수 (의류 기본 추천 여지) */
                        + 0.15
                        /* 5) 리뷰 점수 ↓ (0~0.08, 체감 완화) */
                        + CASE
                              WHEN p.AVG_REVIEW IS NULL THEN 0.04
                              ELSE POWER(p.AVG_REVIEW / 5.0, 2) * 0.08
                            END
                    ) AS PREFERENCE_SCORE,
                /* 매칭된 태그 요약 */
                NVL((
                        SELECT LISTAGG(ct.LABEL, ',') WITHIN GROUP (ORDER BY ct.LABEL)
                        FROM PRODUCT_TAG pt
                                 JOIN COMMON_TAG ct ON ct.COMMON_TAG_ID = pt.COMMON_TAG_ID
                        WHERE pt.PRODUCT_ID = p.PRODUCT_ID
                          AND ct.TAG_GROUP IN ('LOOK','FIT','COLOR_TONE','COLOR_SAT','BOLDNESS')
                    ), '베이직 스타일') AS MATCHED_STYLES
            FROM PRODUCT p
                     JOIN PRODUCT_CATEGORY_SUB pcs ON pcs.PRODUCT_CATEGORY_SUB_ID = p.CATEGORY_ID
                     JOIN PRODUCT_CATEGORY_MAIN pcm ON pcm.PRODUCT_CATEGORY_MAIN_ID = pcs.PRODUCT_CATEGORY_MAIN_ID
            WHERE pcm.NAME = '의류'
              AND (p.GENDER = #{gender} OR p.GENDER = 'U')
        )
        SELECT *
        FROM fashion_scores
        WHERE PREFERENCE_SCORE > 0.2
        ORDER BY PREFERENCE_SCORE DESC, AVG_REVIEW DESC NULLS LAST
            FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 카테고리별 최저가만 조회 -->
    <select id="getCategoryMinPrice" resultType="java.math.BigDecimal">
        SELECT MIN(p.PRICE)
        FROM PRODUCT p
        WHERE p.CATEGORY_ID = #{categoryId}
        AND p.PRICE > 0
            AND (p.GENDER = #{userGender} OR p.GENDER = 'U')
    </select>
</mapper>
