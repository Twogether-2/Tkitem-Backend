name: cicd

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  IMAGE: ${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }}

jobs:
  #   test:
  #     name: Test (Gradle)
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3
  #       - uses: actions/setup-java@v3
  #         with:
  #           java-version: '21'
  #           distribution: 'temurin'
  #       - uses: actions/cache@v3
  #         with:
  #           path: |
  #             ~/.gradle/caches
  #             ~/.gradle/wrapper
  #           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
  #           restore-keys: |
  #             ${{ runner.os }}-gradle-
  #       - name: Inject env file (tests only)
  #         run: |
  #           mkdir -p ./src/test/resources
  #           echo "${{ secrets.ENV_VARS }}" > ./src/test/resources/env.properties
  #       - name: Gradlew chmod
  #         run: chmod +x ./gradlew
  # - name: Run tests
  #   run: ./gradlew clean test --no-daemon

  build:
    name: Build (Jar)
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradlew chmod
        run: chmod +x ./gradlew
      - name: BootJar
        run: ./gradlew bootJar --no-daemon
      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  docker-push:
    name: Docker Build & Push (latest)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download jar artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_ID }}" --password-stdin
      - name: Build & Push :latest
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }} .
          docker push ${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }}

  deploy:
    name: Deploy to EC2
    needs: docker-push
    runs-on: ubuntu-latest
    env:
      ENV_VARS: ${{ secrets.ENV_VARS }}
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: ENV_VARS
          script: |
            set -euo pipefail
            cd /home/ubuntu
            # GitHub secrets → EC2 환경변수 → 파일로 저장
            echo "$ENV_VARS" > /home/ubuntu/env.properties
            sudo chmod 600 /home/ubuntu/env.properties

            # Docker Hub 로그인은 sudo 컨텍스트에서 수행 (root의 /root/.docker/config.json 생성)
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_ID }}" --password-stdin

            # 최신 이미지 풀
            sudo docker pull "${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }}:latest"

            # 배포 스크립트가 docker/compose를 호출하므로 sudo로 실행
            sudo -E ./deploy.sh

  notify:
    needs: [deploy]
    if: ${{ always() }}   # 배포 성공/실패 관계없이 실행
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord (Success)
        if: ${{ needs.deploy.result == 'success' }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            🚀 배포 성공: ${{ github.repository }} @ ${{ github.sha }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Discord (Failure)
        if: ${{ needs.deploy.result == 'failure' }}
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ 배포 실패: ${{ github.repository }} @ ${{ github.sha }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}