name: cicd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 빌드 시 필요한 환경파일 주입
      - name: Set environment values
        run: |
          cd ./src/main/resources
          touch ./env.properties
          echo "${{ secrets.ENV_VARS }}" > ./env.properties

      - name: Gradlew auth setting
        run: chmod +x ./gradlew

      # 테스트 포함 빌드
      - name: Run tests and build
        run: ./gradlew clean build --no-daemon

  docker-push-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 도커 로그인
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_ID }}" --password-stdin

      # 도커 허브에 push
      - name: Build & Push (latest)
        env:
          IMAGE: ${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }}
        run: |
          docker build --pull -f Dockerfile -t "$IMAGE:latest" .
          docker push "$IMAGE:latest"

      # EC2에 배포
      - name: Deploy to EC2 (pull latest)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKERHUB_ID }}/${{ secrets.DOCKERHUB_REPO }}:latest
            cd /home/ubuntu
            sudo chmod +x deploy.sh
            sudo docker pull $IMAGE
            ./deploy.sh
